package com.tpt.shavadoop.master;

import java.io.File;
import java.io.FileFilter;
import java.util.List;

import org.apache.log4j.Logger;

import com.tpt.shavadoop.master.remote.RemoteExecutor;
import com.tpt.shavadoop.master.split.ISplitter;

public class Master {
	
	// Default configuration file name
	public static final String DEFAULT_CFG_FILE = "conf/master.properties";
	
	private static final Logger logger = Logger.getLogger(Master.class);

	/**
	 * Test if a set of tasks have been performed
	 * @param l : list of threads
	 * @return
	 */
	public static boolean isFinished(List<RemoteExecutor> l) {
		boolean result = true;
		for (RemoteExecutor tsk:l) {
			if (tsk.isAlive()) {
				result = false;
				break;
			}
		}
		return result;
	}
	
	/**
	 * Create all mappers commands and add then to the TaskManager mapper queue
	 */
	private static void createAllMappers() {
		File dir = new File(Configuration.getWorkingDir());
		FileFilter ff = new FileFilter() {
			
			@Override
			public boolean accept(File pathname) {
				if (pathname.getName().startsWith("split"))
					return true;
				else
					return false;
			}
		};
		// Get all splits generated by splitter
		File [] allSplits = dir.listFiles(ff);
		for (File f:allSplits) {
			// Create the map command using the slave.jar java program
			String mapCommand = Configuration.getParameter("slave.prg")+" --map ";
			mapCommand += Configuration.getParameter("slave.mapperClass");
			mapCommand += " "+f.getAbsolutePath();
			// Create related RemoteExecutor object
			RemoteExecutor rMapper = new RemoteExecutor(mapCommand);
			// add it to TaskManager mapper queue
			TaskManager.addMapper(rMapper);
		}
	}

	/**
	 * @param args
	 * 
	 */
	public static void main(String[] args) {
		//
		// if args[0] is defined, it should correspond to specific configuration file
		//
		String cfgFile = DEFAULT_CFG_FILE;
		if (args.length == 1) {
			cfgFile = args[0];
		}
		
		//
		// Initialize Master Configuration singleton
		//
		Configuration.initConfiguration(cfgFile);
		logger.info(Configuration.getMessage("master.init"));
		
		//
		// Get and Start splitter
		//
		logger.info(Configuration.getMessage("split.begin"));
		ISplitter splitter = Configuration.getSplitter();
		splitter.doSplit();
		logger.info(Configuration.getMessage("split.end"));
		
		//
		// Create all mappers and add them to TaskManagerMapper queue
		//
		createAllMappers();
		
		//
		// Start TaskManager thread
		//
		TaskManager.applyStarter();
		
//		List<String> hosts = ResourceManager.getOnlineHosts();
//		List<RemoteExecutor> res = new ArrayList<RemoteExecutor>();
//		// Create a thread for each available host
//		for (String host:hosts) {
//			RemoteExecutor re = new RemoteExecutor("./waiter.jar");
//			re.setHostName(host);
//			res.add(re);
//		}
//		// Stat all threads
//		for (RemoteExecutor tsk:res) {
//			tsk.start();
//		}
//		// wait for all thread finished
//		while (!isFinished(res));
//		// All finished
//		System.out.println("All finished");
	}

}
